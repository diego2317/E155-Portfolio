---
title: "Lab 1: FPGA and MCU Setup and Testing"
description: ""
author: "Diego Weiss"
date: "8/27/25"
categories:
  - reflection
  - labreport
draft: false
---

## Introduction
This lab involved soldering all the parts for the E155 development board. In addition, a design was implemented on the FPGA to operate a 7-segment LED display and control several other LEDs.

## Soldering the Development Board
We were given a multitude of parts, both SMT and THT components. Soldering them to the E155 development board took approximately three hours, with the first thirty minutes spent attempting to solder the 5V regulator to the board. Figure 1 displays the completed development board.

![Figure 1](/images/lab1/devboard.jpg)


## Technical Documentation
The source code for the project can be found in the lab 1 folder of my [Github repository for E155](https://github.com/diego2317/E155).

### Block Diagram
Figure 2 (below) contains the block diagram used to design the combinational logic to drive the LEDs and 7-segment display. \

![Figure 2](/images/lab1/lab1_blockdiagram.jpg)

### LED Control
Table 1 contains the truth table used to determine the state of the LEDs. 

| s[0] | s[1] | led[0]| s[2] | s[3] | led[1]|
|:----:|:----:|:-----:|:----:|:----:|:-----:|
| 0    | 0    | OFF   | 0    | 0    | OFF   |
| 1    | 0    | ON    | 1    | 0    | OFF   |
| 0    | 1    | ON    | 0    | 1    | OFF   |
| 1    | 1    | OFF   | 1    | 1    | ON    |

By inspection of figure 2, we see that led[0] is determined by s[0] XOR s[1], and led[1] is determined by s[2] AND s[3]. In order to blink led[2] at 2.4Hz, the HSOSC module was used to create a clock with a frequency of 24MHz. I then encoded a digitally controlled oscillator, using the formula `f_LED = f_clk * p / 2^N`. I chose values p = 430 and N = 32, theoretically producing an oscillator with a frequency of 2.403 Hz.

### 7-Segment Display Control
The 7-segment display is controlled by a submodule that converts the input switches (s[3:0]) into a 7-bit output (s[6:0]). The submodule contains a case statement that converts each of the 16 possible 4-bit inputs into the corresponding values needed to illuminate the 7-segment display and create the corresponding hexadecimal number. Because the 7-segment display is common anode, the necessary pins are pulled to 0 to illuminate the necessary segments. For example, the input 4'h0 is converted to 7'b1000000. s[0] corresponds to segment A and s[6] corresponds to segment G of the 7-segment display. See figure 3 for the layout. \
![Figure 3](/images/lab1/7segdisplay.png){fig-align="center" height=300}

### Schematic
I consulted the datasheet of the **SOMETHING** to determine which FPGA pins I would connect to the 7-segment display. The resultant schematic can be seen below.

**INSERT SCHEMATIC HERE**

## Results and Discussion

### Testbench Simulation
I created testbenches for each of the submodules (`led_controller.sv` and `display_controller.sv`) as well as a testbench for the top-level module. Figure BLANK shows a screenshot of the QuestaSim simulations. Using an oscilloscope, I determined that led[2] was blinking at a frequency of 2.4Hz.

## Conclusion
The development board succesfully drove the 7-segment display and controlled the three LEDs as desired. This lab took 20 hours.