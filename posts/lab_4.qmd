---
title: "Lab 4: Digital Audio"
description: ""
author: "Diego Weiss"
date: "10/5/25"
categories:
  - reflection
  - labreport
draft: false
---

## Introduction

The goal of this lab was to use our STM32 MCUs to play music by toggling a GPIO pin using timers at a specific frequency for specific durations. From a technical standpoint, the goal of this lab was to gain confidence reading the datasheet and writing device drivers.


## Technical Documentation

As always, all the code for this lab can be found in the lab 4 folder of my [Github repository for E155](https://github.com/diego2317/E155-labs).

### Circuitry

I consulted the [datasheet](https://www.ti.com/lit/ds/symlink/lm386.pdf?ts=1759688431008&ref_url=https%253A%252F%252Fwww.ti.com%252Fproduct%252FLM386%252Fpart-details%252FLM386N-4%252FNOPB) of the LM386N-4 audio op-amp to design my circuit. It features a potentiometer for volume control, and the LM386N-4 ensures the current draw on the microcontroller stays at acceptable levels. 

![Circuit](/images/lab4/schematic.png)

### Timing

I used the Timer 15 and Timer 16 registers to output a square wave from the microcontroller. By configuring the timers in PWM mode and connecting them to a GPIO Pin, I was able to use the timers to drive a square wave output. I used the phase-locked loop to clock the microcontroller at 80Mhz. I used a prescaler value of 999 for timer 16. By configuring my auto-reload value to be 16 bits, the minimum and maximum frequency supported by my clock can be determined by setting the auto-reload value to 0 and 65536 respectively. I used the following formulas to do my calculations:
$$f_{cnt} = \frac{f_{clk}}{PSC + 1}$$
$$\frac{1}{f_{sound}} = \frac{1}{f_{cnt}} \cdot \text{cycles}$$
$$\text{cycles} = \frac{f_{clk}}{f_{sound} \cdot (PSC + 1)}$$
$$f_{sound} = \frac{f_{clk}}{\text{cycles} \cdot (PSC + 1)}$$

With these formulas, the initial clock value of 80 Mhz, and the range for the auto-reload value of 0 to 65536, a minimum frequency of 1.22Hz (when the auto-reload is 65536) and a maximum frequency of 80 kHz (when the auto-reload is 0) can be determined. To ensure that individual pitches are accurate to within 1% across the frequency range of 220-1000 Hz, I did some calculations in google sheets, which can be seen below.

![Frequency Calculations](/images/lab4/frequency_table.png)

In order to determine the minimum and maximum delay, I performed similar calculations. I used a prescaler of 1999 and configured timer 15 for my delays. The maximum duration produced given this prescaler value and the 80Mhz system clock should be 1.64 seconds (when the auto-reload value is 65535). The minimum duration produced given this prescaler value and the 80Mhz system clock should be 0.025 milliseconds (when the auto-reload value is 0).

## Conclusion
The design fulfilled all the requirements, playing both Fur Elise and hot cross buns. I spent 9 hours on this lab.

## AI Prototype

I began by giving ChatGPT 5 the following prompt:

::: callout-note

What timers should I use on the STM32L432KC to generate frequencies ranging from 220Hz to 1kHz? Whatâ€™s the best choice of timer if I want to easily connect it to a GPIO pin? What formulae are relevant, and what registers need to be set to configure them properly?

:::

The full chat output produced by GPT5 can be seen at this [link](https://chatgpt.com/share/68dee95d-a55c-8012-a4eb-f0e61d6eefc9). Notably, GPT5 gave me formulas for determining PWM frequency and OC toggle frequency. It also gave me instructions for picking PSC/ARR, and told me to fix PSC and vary ARR across my range. It gave me instructions to configure the AHB2ENR and APB1ENR1 registers for the RCC, the MODER and AFR[0/1] reigsters for GPIO, and the CR1, PSC, and ARR registers for TIMx (x being whichever TIM I chose). These were not the registers I used to configure the RCC, and I didn't touch the AFR[0/1] registers, but the rest of the advice was sound. It also gave me what amounts to pseudocode for the main method, which could be useful.